" vim-plug settings ----------{{{
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive' " git support
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' " Snippet support
Plug 'vimwiki/vimwiki' | Plug 'mattn/calendar-vim' " Calendar, Diary and wiki management
Plug 'w0rp/ale' " Linting support (syntax and semantics)
Plug 'tpope/vim-commentary' " commenting support
Plug 'morhetz/gruvbox' "Gruvbox color scheme
Plug 'nlknguyen/papercolor-theme'
Plug 'junegunn/goyo.vim' | Plug 'junegunn/limelight.vim' " Distraction free writing
Plug 'ledger/vim-ledger' " ledger-cli support
Plug 'vim-airline/vim-airline' " Using airline for status line
Plug 'tpope/vim-surround' " Helps in surrounding text e.g. replace \" with '
Plug 'posva/vim-vue' " Required for proper vue editting
Plug 'ElmCast/elm-vim' " Elm support
" Plug 'alx741/vim-hindent' " Haskell indenting
Plug 'rrethy/vim-hexokinase' " Showing colors in vim
Plug 'chrisbra/csv.vim'
Plug 'editorconfig/editorconfig-vim' " support for editor config
Plug 'fatih/vim-go'

call plug#end()
" ----------}}}

" General options for most files ------{{{

" Required for vimwiki to work properly and other things
set nocompatible
filetype plugin indent on " enables both plugin and indents of files
syntax on

set number " show line number where cursor is
set relativenumber " other lines shown relative to current line
set numberwidth=2 " Minimum space set for line nos
set tabstop=4 " <Tab> = 4 spaces
set shiftwidth =4 " Kinda similar to tabstop
set expandtab " Repalce <Tab> with spaces when used.
set copyindent " Use same indentation as found in files
set autoindent " Copies current indent to next line
set smartindent " Better indenting than autoindent e.g. line after {
set incsearch " Show matching search pattern as you type
set showmatch " Jump to matching bracket temporarily once typed
cabbr <expr> %f expand('%:p:h') " Expands %f to directory in command
cabbr <expr> %% expand('%:h') " Expands %% to directory in command
set noshowmode " disables showing of mode coz this is already done by airline
set foldmethod=syntax

" setting local leader and global leader
let mapleader=";"
let maplocalleader=","

" added for bash like completion
set wildmode=longest:full
set wildmenu

set spell
set spelllang=en_us,en_gb

packadd! matchit " allows matching xml tags and ifs

" abbreviations for common things ------ {{{
iabbrev @@ yohanaizraeli@gmail.com
iabbrev @@s johnduli@yahoo.com
iabbrev desing design
iabbrev Desing Design
iabbrev funtion function
" ------}}}
" ------}}}

" Options for document files------{{{ 
autocmd BufRead,BufNewFile *.txt,*.md,*.rst,*.tex,*.wiki setlocal textwidth=72
"------}}}

" Editting of commonly used files ------{{{

" enable editting and sourcing vimrc
nnoremap  <leader>ev :vsplit <C-r>=resolve(expand($MYVIMRC))<cr><cr>
nnoremap  <leader>sv :source $MYVIMRC<cr>

" enable editing of ledger file
nnoremap <leader>e$ :vsplit ~/docs/ledger/blackbook.ledger<cr>
" ------}}}

" Setting default tab space to 2 for some files ------{{{
augroup indent_2_spaces
    autocmd!
    autocmd FileType html,javascript,arduino,vue,elm setlocal tabstop=2 
    autocmd FileType html,javascript,arduino,vue,elm setlocal shiftwidth=2
augroup END
"------}}}

" Color configs, set colorscheme here ------{{{
let g:gruvbox_italic=1
" let g:gruvbox_contrast_light="hard" " can be soft, medium(default) or hard
let g:gruvbox_contrast_dark="hard" " can be soft, medium(default) or hard
set background=dark
colorscheme gruvbox

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" ------}}}

" Ultisnips configurations ------{{{

" ultisnips trigger configs
let g:UltiSnipsExpandTrigger="<c-e>" " Default is <tab>
" let g:UltiSnipsJumpForwardTrigger="<c-b>" " Default is <c-j>
" let g:UltiSnipsJumpBackwardTrigger="<c-z>" " Default is <c-k>

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]
" let g:UltiSnipsSnippetsDir="~/.vim/mysnippets"

" ------}}}

" Vimscript file settings ------{{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker " allows folding in vim files
    autocmd FileType vim setlocal foldlevelstart=0
augroup END
" ------}}}

" Vimwiki configuration ------{{{
augroup filetype_vimwiki
    autocmd!
    autocmd FileType vimwiki :iabbrev <expr> td strftime("[%a %d %b %Y]") " map tds in insert mode to current date
    " delete times in vimwiki todo list [06:30 - 07:00]
    autocmd FileType vimwiki vnoremap dt :s/\s\[\d\d:\d\d\s-\s\d\d:\d\d\]//g <Cr>
    autocmd FileType vimwiki nnoremap dt :s/\s\[\d\d:\d\d\s-\s\d\d:\d\d\]//g <Cr>
    autocmd FileType vimwiki setlocal foldmethod=indent
    " calling let g:vimwiki_folding does not reset these variables, so setlocal has been used instead
    autocmd FileType vimwiki nnoremap <leader>tl :setlocal foldmethod=expr <Cr> :setlocal foldexpr=VimwikiFoldListLevel(v:lnum) <Cr> :setlocal foldtext=VimwikiFoldText() <Cr>
    autocmd FileType vimwiki nnoremap <leader>tn :setlocal foldmethod=expr <Cr> :setlocal foldexpr=VimwikiFoldLevel(v:lnum) <Cr> :setlocal foldtext=VimwikiFoldText() <Cr>
    autocmd FileType vimwiki nnoremap <leader>cp :call TodoPercentage() <Cr>
    " experiments for list reordering
    autocmd FileType vimwiki nnoremap <leader>r :call ReorderTasks() <Cr>
    autocmd FileType vimwiki nnoremap <leader>tr :execute "normal dalgg/\\[\\s\\]\<lt>cr>Pzt:\<lt>cr>:nohlsearch\<lt>cr>" <Cr>
augroup END

let g:vimwiki_list = [{ "path": "~/vimwiki",
                      \ "path_html": "~/vimwiki/public_html",
                      \ "auto_tags": 1,
                      \ "auto_diary_index": 1 },
            \ {"path":"~/todo", "path_html": "~/todo/public_html"}]

" setting this to list makes diary generation very very slow
let g:vimwiki_folding = 'custom'

" vimwiki % of tasks done in table
" Table should be formatted as
" | 12 | 13 | 15 | % |
" | day | total to do | total achieved | percent calculated |
" the place with the % should be left blank and will be filled by the function
function! TodoPercentage()
    normal ^3wviw"py
    let total = str2float(getreg("p")) " get number in p register from second column
    normal ^5wviw"py
    let achieved = str2float(getreg("p")) " get numer in p register from third column
    let percentage = (achieved / total) * 100
    let per = printf("%.2f", percentage)
    " Print out percentage into the 4th column
    execute "normal! ^6wa ".per."\<esc>"
endfunction

" orders tasks listing done tasks first
function! ReorderTasks()
    normal gg/\[ \]
    let lastChecked = search('^- \[ \]', "W")
    execute "normal! ".lastChecked."gg"
    let completedTask = search('^- \[X\]', "W")
    while completedTask != 0
        execute "normal ".completedTask."ggvalx".lastChecked."ggP"
        normal gg/\[ \]
        let lastChecked = search('^- \[ \]', "W")
        let completedTask = search('^- \[X\]', "W")
    endwhile
endfunction
" ------}}}

" airline configs ------{{{
" set laststatus=2
let g:airline_symbols_ascii = 1 " to use powerline symbols set g:airline_powerline_fonts=0
let g:airline_section_z= '%3p%% %l:%c'
" ------}}}

" Distraction Free Writing (Goyo and limelight) ------{{{
:command WriteMode set background=light | colorscheme PaperColor | setlocal spell | Goyo
:command WriteCode set background=dark | colorscheme gruvbox
function! s:goyo_enter()
  set noshowcmd
  set scrolloff=999
  Limelight
endfunction

function! s:goyo_leave()
  set showcmd
  set scrolloff=5
  Limelight!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
" ------}}}

" Shortcuts to use ALE checkers ------{{{
nnoremap <silent> <leader>aj :ALENext<cr>
nnoremap <silent> <leader>ak :ALEPrevious<cr>
" ------}}}

" Fix width of calendar in vertical mode ------{{{
" Fix ensures last day of week is shown when relative number has been set
let g:calendar_options='nornu'
" ------}}}

" NerdCommenter Options ------{{{
augroup nerd_commenter
    let g:NERDSpaceDelims = 1 " Add spaces after comment delimiters by default
    let g:NERDCompactSexyComs = 1 " Use compact syntax for prettified multi-line comments
    let g:NERDCommentEmptyLines = 1 " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting
augroup END
" ------}}}

" Ledger config options ------{{{
" added to catch the most potential problems in file e.g. undefined accounts
let g:ledger_extra_options = '--pedantic --explicit --check-payees'
let g:ledger_default_commodity = 'Ksh'
let g:ledger_commodity_sep = ' ' " Should be a space btn default commodity and amount
let g:ledger_commodity_before = 1 " Default commodity prepended to amount
let g:ledger_align_at = 50 " sets up the column of aligning decimal point

" allows autocomplete and align in ledger files
augroup filetype_ledger
    autocmd!
    " autocmd FileType ledger inoremap <silent> <Tab> \<C-r>=ledger#autocomplete_and_align()<CR>
    autocmd FileType ledger vnoremap <silent> <Tab> :LedgerAlign<CR>
augroup END

" ------}}}

autocmd FileType vue syntax sync fromstart


" TODO: Clean up everything below this line

" mappings from learnvimscipt
" ononremap
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap il[ :<c-u>normal! F[vi[<cr>
onoremap in@ :execute "normal! /@\r:nohlsearch\rhviw"<cr> 
nnoremap <leader>pb :execute "leftabove vsplit " . bufname("#") <cr>

" Dealing with large files (>10mb) ------{{{
let g:LargeFile = 1024 * 1024 * 10
augroup LargeFile
  au!
  autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function! LargeFile()
 " no syntax highlighting etc
 set eventignore+=FileType
 " save memory when other file is viewed
 setlocal bufhidden=unload
 " is read-only (write with :w new_filename)
 setlocal buftype=nowrite
 " no undo possible
 setlocal undolevels=-1
 " display message
 autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed (see .vimrc for details)."
endfunction
" ------}}}
"
"
" Mapping to make it easier to find last command in commandmode
cnoremap <C-p> <UP>


" Commands to help with haskell coding ----------{{{
" commands run for haskell linters
" stack install hlint
" stack install hfmt
" stack install brittany

let g:ale_linters = {
    \   'haskell': ['brittany', 'stack-ghc', 'ghc-mod', 'hlint', 'hdevtools', 'hfmt'],
    \   'python': ['prospector'],
    \}

let g:ale_python_prospector_options = '--no-external-config'

let g:ale_fixers = {
    \   'haskell': ['brittany', 'hlint'],
    \ 'python': ['isort', 'yapf', 'remove_trailing_lines', 'trim_whitespace'],
    \ 'ledger': ['trim_whitespace'],
    \}
" ----------}}}

" keep cursor 3 lines from bottom or top
set scrolloff=3

" hexokinase configs
let g:Hexokinase_highlighters = ['backgroundfull']

" Editorconfig options
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" VTE termincal cursor options ----{{{
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"
"----}}}
