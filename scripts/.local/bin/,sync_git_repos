#!/bin/bash
# I've parallelized the git checks so that I get faster results

# TODO: may be add support for all folders in the projects folder
#
# set -euo pipefail

folders_to_check=(
    '/home/rookie/projects/pomodoro'
    '/home/rookie/projects/purity_maths_questions'
    '/home/rookie/projects/weekend_projects'
    '/home/rookie/docs/ledger'
    '/home/rookie/docs/weekly'
    '/home/rookie/dotfiles'
    '/home/rookie/projects/blog'
    '/home/rookie/vimwiki'
    '/home/rookie/.password-store'
    ) 

check_folder_sync_status() {
    local folder=$1
    branches_info=$(git -C $folder branch -vv | grep -E 'ahead|behind')
    files_not_commited=$(git -C $folder status -s)
    message=""
    if [[ -n $branches_info || -n $files_not_commited ]]; then
        message="$message\033[31m$folder\033[39;49m not in sync\n"
        if [[ -n $branches_info ]]; then
            message="$message\tbranches not in sync:\n"
            while read -r line; do
                message="$message\t\t$line\n"
            done <<< "$branches_info"
        fi
        if [[ -n $files_not_commited ]]; then
            files_not_commited=$(echo "$files_not_commited" | tr '\n' ';')
            message="$message\tFiles not committed: $files_not_commited"
        fi
    else
        pull_result=$(git -C $folder pull)
        if [[ $pull_result != "Already up to date." ]]; then
            message="$message\n$pull_result"
        fi
    fi
    if [[ $message != "" ]]; then
        echo -e "$message"
    fi
}

for folder in "${folders_to_check[@]}"; do
    if [[ ! -d "$folder" ]]; then
        echo -e "\033[31m$folder\033[39;49m doesn't exist"
    else
        check_folder_sync_status "$folder" &
    fi
done

wait

echo "done sync checks"
